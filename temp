      <MapGL
        {...viewport}
        mapboxApiAccessToken={TOKEN}
        // mapStyle="mapbox://styles/mapbox/light-v8"
        mapStyle="mapbox://styles/b30wulffz/ck77ua3ax0yt81ioers9qxmn0"
        onViewportChange={_onViewportChange}
        maxZoom={20}
      >
        <GeolocateControl
          style={geolocateStyle}
          positionOptions={{ enableHighAccuracy: true }}
          trackUserLocation={true}
        />
      </MapGL>
      {/* <MapGL
        mapboxApiAccessToken={TOKEN}
        width={400}
        height={400}
        latitude={37.7577}
        longitude={-122.4376}
        zoom={8}
        onViewportChange={viewport => {
          const { width, height, latitude, longitude, zoom } = viewport;
          // call `setState` and use the state to update the map.
        }} */}
      />


      const [viewport, setViewPort] = useState({
    width: "100%",
    height: "100vh",
    latitude: 0,
    longitude: 0,
    zoom: 6
  });

  const _onViewportChange = viewport => {
    // setViewPort({
    //   ...viewport
    //   //   transitionDuration: 400
    // });
    setViewPort({
      ...viewport,
      //   zoom: expansionZoom,
      transitionInterpolator: new FlyToInterpolator({
        speed: 2
      }),
      transitionDuration: "auto"
    });
    console.log(viewport.latitude);
  };


  
const TOKEN = config.ACCESS_TOKEN;

const geolocateStyle = {
  float: "left",
  margin: "50px",
  padding: "10px"
};


------------------------------------




import React, { useState, useEffect } from "react";
import { render } from "react-dom";
import ReactLoading from "react-loading";
import FadeIn from "react-fade-in";
import Lottie from "react-lottie";

import HomePage from "./HomePage";

// import * as cuteLoader from "../../assets/loader/1016-spirit-geek.json";
// import * as cuteLoader from "../../assets/loader/11422-travel-icons-map.json";
import * as cuteLoader from "../../assets/loader/11562-van-icon.json";
import Form from "./AddForm";
import SearchForm from "./SearchForm";

const Example = ({ type, color }) => (
  <ReactLoading type={type} color={color} height={667} width={375} />
);

const defaultOptions = {
  loop: true,
  autoplay: true,
  animationData: cuteLoader.default,
  rendererSettings: {
    preserveAspectRatio: "xMidYMid slice"
  }
};

const App = () => {
  const [load, setLoad] = useState({
    loaded: false,
    currClass: ""
  });

  useEffect(() => {
    setTimeout(() => {
      setLoad({ loaded: true, currClass: "done" });
    }, 3000);
  }, []);

  return (
    <div className={"home " + load.currClass}>
      {!load.loaded ? (
        // <Example type="bubbles" color="red" />
        <FadeIn>
          <div className="loader">
            <Lottie options={defaultOptions} height={220} width={220} />
          </div>
        </FadeIn>
      ) : (
        <FadeIn>
          <SearchForm />
          {/* <Form /> */}
          {/* <div className="loadedText">Loaded</div> */}
        </FadeIn>
      )}
    </div>
  );
};
export default App;

const container = document.getElementById("app");
render(<App />, container);













import React, { useState, useEffect } from "react";
import MapGL, {
  GeolocateControl,
  FlyToInterpolator,
  Marker,
  NavigationControl
} from "react-map-gl";
// import 'react-map-gl-geocoder/dist/mapbox-gl-geocoder.css'
import Geocoder from "react-mapbox-gl-geocoder";
import { Row, Col, CardPanel } from "react-materialize";
import Anime from "react-anime";

// import Pin from "./Pin";
// import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
// import { faMapMarkerAlt } from "@fortawesome/free-solid-svg-icons";

import config from "../../assets/config";

const TOKEN = config.ACCESS_TOKEN;

const geolocateStyle = {
  float: "left",
  margin: "20px"
};

const Map = () => {
  const [viewport, setViewPort] = useState({
    width: "100%",
    height: "90vh",
    zoom: 6,
    latitude: 0,
    longitude: 0
  });

  // const [userLocation, setUserLocation] = useState({
  //   latitude: 0,
  //   longitude: 0
  // });

  const _onViewportChange = newViewport => {
    setViewPort({
      ...newViewport
    });
  };
  // const handleGeocoderViewportChange = newViewport => {
  //   setViewPort({
  //     ...newViewport,
  //     transitionDuration: 1000
  //   });
  // };
  const onSelected = (viewport, item) => {
    setViewPort({ ...viewport });
    console.log("Selected: ", item);
  };
  useEffect(() => {
    navigator.geolocation.getCurrentPosition(position => {
      // setUserLocation({
      //   latitude: position.coords.latitude,
      //   longitude: position.coords.longitude
      // });
      setViewPort({
        ...viewport,
        latitude: position.coords.latitude,
        longitude: position.coords.longitude
      });
    });
  }, []);

  const getCoordinates = evt => {
    console.log(evt.lngLat[0], evt.lngLat[1]);
  };

  const mapRef = React.createRef();

  return (
    // <div style={{ margin: "0 auto", width: "60vw" }}>

    <CardPanel className="teal">
      <Row>
        <Col s={10} m={4}>
          <span className="white-text">
            For a simpler card with less markup, try using a card panel which
            just has padding and a shadow effect
          </span>
        </Col>
        <Col s={10} m={8}>
          <MapGL
            {...viewport}
            // transitionInterpolator={new FlyToInterpolator({ speed: 4 })}
            // transitionDuration="auto"
            mapboxApiAccessToken={TOKEN}
            mapStyle="mapbox://styles/b30wulffz/ck77ua3ax0yt81ioers9qxmn0"
            onViewportChange={_onViewportChange}
            maxZoom={10}
            style={{ position: "relative" }}
            onClick={e => {
              getCoordinates(e);
            }}
            ref={mapRef}
          >
            <GeolocateControl
              style={geolocateStyle}
              positionOptions={{ enableHighAccuracy: true }}
              trackUserLocation={true}
            />
            <div style={{ position: "absolute", right: 0, margin: "20px" }}>
              <NavigationControl showCompass={false} />
            </div>
            <Geocoder
              mapRef={mapRef}
              // onViewportChange={handleGeocoderViewportChange}
              mapboxApiAccessToken={TOKEN}
              onSelected={onSelected}
              viewport={viewport}
              hideOnSelect={true}
              queryParams={{ country: "in" }}
            />
            {/* 
        <Marker
          longitude={userLocation.longitude}
          latitude={userLocation.latitude}
          
        >
          <div
            style={{
              border: "thin solid black",
              position: "relative",
              height: "20px",
              width: "20px"
            }}
          >
            <FontAwesomeIcon
              icon={faMapMarkerAlt}
              color={"red"}
              size={"lg"}
              style={{ bottom: "50%", position: "relative" }}
            />
          </div>
        </Marker> */}
          </MapGL>
        </Col>
      </Row>
    </CardPanel>
    // </div>
  );
};

export default Map;
